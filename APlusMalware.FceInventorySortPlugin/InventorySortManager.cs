using System;
using System.Collections.Generic;
using System.Linq;

namespace APlusMalware.FceInventorySortPlugin
{
    public class InventorySortManager : FortressCraftMod
    {
        private readonly Dictionary<Int32, Sort> _sorts = new Dictionary<Int32, Sort>(); 

        public delegate void Sort(PlayerInventory inventory);

        public void AddSort(String itemKey, Sort sort)
        {
            ModItemMap map;
            if (ModManager.mModMappings.ItemsByKey.TryGetValue(itemKey, out map))
                _sorts.Add(map.ItemId, sort);
            else
                UnityEngine.Debug.LogError("Inventory Sort AddSort could not find the item " + itemKey);
        }

        public override ModRegistrationData Register()
        {
            ModRegistrationData data = new ModRegistrationData();
            
            AddSort("APlusMalware.FceInventorySortPlugin.TypeTypeIdSort", TypeTypeIdSort);

            return data;
        }

        public override ModItemActionResults PerformItemAction(ModItemActionParameters parameters)
        {
            Sort sort;
            if (_sorts.TryGetValue(parameters.ItemToUse.mnItemID, out sort))
                sort(WorldScript.mLocalPlayer.mInventory);
            else
                return null;

            return new ModItemActionResults {Consume = false};
        }

        private void TypeTypeIdSort(PlayerInventory inventory)
        {
            Int32 invWidth = inventory.maItemInventory.GetLength(0);
            Int32 invHeight = inventory.maItemInventory.GetLength(1);
            var sorted = from i in inventory.maItemInventory.ToList()
            where i != null
            orderby i.mType descending, i.mnItemID, i.mType == ItemType.ItemCubeStack ? ((ItemCubeStack)i).mCubeType : 0, i.mType == ItemType.ItemCubeStack ? ((ItemCubeStack)i).mCubeValue : 0 
            select i;
            inventory.maItemInventory = sorted.ToList().To2DArray(invWidth, invHeight);
            inventory.MarkDirty();
        }
    }
}
